{"ast":null,"code":"import { DELETE_COMMENT, DELETE_POST, EDIT_COMMENT, GET_POSTS, LIKE_POST, UNLIKE_POST, UPDATE_POST } from \"../actions/post.actions\";\nconst initialState = {};\nexport default function postReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return action.payload;\n\n    case LIKE_POST:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            likers: [action.payload.userId, ...post.likers]\n          };\n        }\n\n        return post;\n      });\n\n    case UNLIKE_POST:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            likers: post.likers.filter(id => id !== action.payload.userId)\n          };\n        }\n\n        return post;\n      });\n\n    case UPDATE_POST:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            message: action.payload.message\n          };\n        } else return post;\n      });\n\n    case DELETE_POST:\n      return state.filter(post => post._id !== action.payload.postId);\n\n    case EDIT_COMMENT:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            comments: post.comments.map(comment => {\n              if (comment._id === action.payload.commentId) {\n                return { ...comment,\n                  text: action.payload.text\n                };\n              } else {\n                return comment;\n              }\n            })\n          };\n        } else return post;\n      });\n\n    case DELETE_COMMENT:\n      return state.map(post => {\n        if (post._id === action.payload.postId) {\n          return { ...post,\n            comments: post.comments.filter(comment => comment._id !== action.payload.commentId)\n          };\n        } else return post;\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/hamza/Downloads/mern-project-master/client/src/reducers/post.reducer.js"],"names":["DELETE_COMMENT","DELETE_POST","EDIT_COMMENT","GET_POSTS","LIKE_POST","UNLIKE_POST","UPDATE_POST","initialState","postReducer","state","action","type","payload","map","post","_id","postId","likers","userId","filter","id","message","comments","comment","commentId","text"],"mappings":"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","sourcesContent":["import {\n  DELETE_COMMENT,\n  DELETE_POST,\n  EDIT_COMMENT,\n  GET_POSTS,\n  LIKE_POST,\n  UNLIKE_POST,\n  UPDATE_POST,\n} from \"../actions/post.actions\";\n\nconst initialState = {};\n\nexport default function postReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n      return action.payload;\n    case LIKE_POST:\n      return state.map((post) => {\n        if (post._id === action.payload.postId) {\n          return {\n            ...post,\n            likers: [action.payload.userId, ...post.likers],\n          };\n        }\n        return post;\n      });\n    case UNLIKE_POST:\n      return state.map((post) => {\n        if (post._id === action.payload.postId) {\n          return {\n            ...post,\n            likers: post.likers.filter((id) => id !== action.payload.userId),\n          };\n        }\n        return post;\n      });\n    case UPDATE_POST:\n      return state.map((post) => {\n        if (post._id === action.payload.postId) {\n          return {\n            ...post,\n            message: action.payload.message,\n          };\n        } else return post;\n      });\n    case DELETE_POST:\n      return state.filter((post) => post._id !== action.payload.postId);\n    case EDIT_COMMENT:\n      return state.map((post) => {\n        if (post._id === action.payload.postId) {\n          return {\n            ...post,\n            comments: post.comments.map((comment) => {\n              if (comment._id === action.payload.commentId) {\n                return {\n                  ...comment,\n                  text: action.payload.text,\n                };\n              } else {\n                return comment;\n              }\n            }),\n          };\n        } else return post;\n      });\n    case DELETE_COMMENT:\n      return state.map((post) => {\n        if (post._id === action.payload.postId) {\n          return {\n            ...post,\n            comments: post.comments.filter(\n              (comment) => comment._id !== action.payload.commentId\n            ),\n          };\n        } else return post;\n      });\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}